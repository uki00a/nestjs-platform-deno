# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# template for the changelog header
header = """
# $PACKAGE\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version is starting_with("$PACKAGE@") %}\
    ## `{{ version | trim_start_matches(pat="$PACKAGE@") | trim_start_matches(pat="v") }}` ({{ timestamp | date(format="%Y-%m-%d") }})
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message }}\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/uki00a/nestjs-platform-deno/pull/${2}))"},
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^BREAKING:", group = "<!-- 1 -->‚ö†Ô∏è Breaking changes" },
  { message = "^BREAKING\\($PACKAGE\\):", group = "<!-- 1 -->‚ö†Ô∏è Breaking changes" },
  { message = "^feat:", group = "<!-- 1 -->üöÄ Features" },
  { message = "^feat\\($PACKAGE\\):", group = "<!-- 1 -->üöÄ Features" },
  { message = "^fix:", group = "<!-- 2 -->üêõ Bug Fixes" },
  { message = "^fix\\($PACKAGE\\):", group = "<!-- 2 -->üêõ Bug Fixes" },
  { message = "^perf:", group = "<!-- 3 -->‚ö° Performance" },
  { message = "^perf\\($PACKAGE\\)", group = "<!-- 3 -->‚ö° Performance" },
  { message = "^deps:", group = "<!-- 3 -->ü§ñ Dependencies" },
  { message = "^deps\\($PACKAGE\\)", group = "<!-- 3 -->ü§ñ Dependencies" }
]
# filter out the commits that are not matched by commit parsers
filter_commits = true
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
